service {
  const html GetSeed = <html> <body>
    Please enter an integer seed for the random number generator:
        <input name="seed" type="text" size=5>
	  </body> </html>;
	  
 const html GameSeeded = <html> <body>
     Ok, now the game can proceed, the generator is seeded.
       </body> </html>;
                               
  const html Init = <html> <body>
    Please guess a number between 0 and 99:
    <input name="guess" type="text" size=2>
  </body> </html>;
  
  const html Retry = <html> <body>
    That number is too large!
    <p>
    Please keep your guess between 0 and 99:
    <input name="guess" type="text" size=2>
  </body> </html>;

  const html Again = <html> <body>
    That is not correct. Try a <[correction]> number:
    <input name="guess" type="text" size=2>
  </body> </html>;

  const html Done = <html> <body>
    You got it, using <[trys]> guesses.
  </body> </html>;

  const html Record = <html> <body>
    That makes you the new record holder,
    beating the old record of <[old]> guesses.
    <p>
    Please enter your name for the hi-score list
    <input name="name" type="text" size=20>
  </body> </html>;

  const html Finish = <html> <body>
    Thanks for playing this exciting game.
  </body> </html>;

  const html List = <html> <body>
    In <[plays]> plays of this game, the record
    holder is <[holder]> with <[record]> guesses.
  </body> </html>;

  schema infoS {
    int plays; 
    int record;
    string holder;
  }
  
  int seed;

  tuple infoS Info;

 int nextRandom()
   { int current;

     seed = (25173 * seed + 13849) % 65536;
     return(seed);
   }

 session Seed() {
   show GetSeed receive[seed = seed];
   exit GameSeeded;
  }          

  session Play() {
    int number, guesses, guess;
    string localholder;

    number = nextRandom() % 100;
    Info.plays = Info.plays+1;
    guesses = 1;
    show Init receive[guess = guess];
    while (guess>99) show Retry receive[guess = guess];
    while (guess!=number) {
       guesses = guesses+1;
       if (guess>number) 
          show plug Again[correction = "lower"] receive[guess = guess];
       else 
          show plug Again[correction = "higher"] receive[guess = guess];
       while (guess>99) show Retry receive[guess = guess];
    }
    show plug Done[trys = guesses];   

    if (Info.record==0 || Info.record>guesses) {
       show plug Record[old = Info.record] receive [localholder = name];
       Info.holder = localholder;
       Info.record = guesses;
    }
   exit Finish;
  }

  session HiScore() {
    exit plug List[plays = Info.plays,holder = Info.holder,record = Info.record];
  } 
}
