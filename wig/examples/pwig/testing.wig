service {
  const html setupFactorial = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">

    <h1> Welcome to our WIG Factorial Service </h1>
    <p>
    Enter a number to calculate it's Factorial (0-20):
    <input type="text" name="fact" size=3>
  </body> </html>;

  const html setupPower = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">

    <h1> Welcome to our WIG Power Service </h1>
    <p>
    Enter a two numbers to calcuate power (0-20):
    <input type="text" name="base" size=3>
    <input type="text" name="exponent" size=3>
  </body> </html>;

  const html setupFibonacci = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">

    <h1> Welcome to our WIG Fibonacci Service </h1>
    <p>
    Enter a number (0-100):
    <input type="text" name="fib" size=3>
  </body> </html>;

  const html answerFactorial = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">
     
    <h1> The Result Page </h1>
    <p>
    <b> The Factorial is : <[factResult]> </b>
    <p>
    Would you care for another calculation (yes or no)?
    <input type="text" name="value" size=5>
  </body> </html>;

  const html answerPower = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">
     
    <h1> The Result Page </h1>
    <p>
    <b> The Power is : <[powerResult]> </b>
    <p>
    Would you care for another calculation (yes or no)?
    <input type="text" name="value" size=5>
  </body> </html>;

  const html answerFibonacci = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">

    <h1> The Result Page </h1>
    <p>
    <b> Fibonacci Value is : <[fibResult]> </b>
    <p>
    Would you care for another calculation (yes or no)?
    <input type="text" name="value" size=5>
  </body> </html>;

  const html Ciao = <html>
    <body bgcolor = "336699">
    <font color = "FFFFFF">
    <h1> Thankyou for using the WIG service </h1>
  </body> </html>;

  int factResult;
  int powerResult;
  int fibResult;

  session CalculateFactorial() {
    int fact;
    string value;

    value = "";
    while (value != "no")
    {
       show setupFactorial receive[fact=fact];
       factResult = fact;
       if((fact == 0) || (fact == 1))
       {
          factResult = 1;
       }
       while(fact > 1 )
       {
	  factResult = (factResult * (fact-1));
	  fact = fact - 1;
       }
       show plug answerFactorial[factResult = factResult] receive[value = value];
    }
    exit Ciao;
  }
  
  session CalculatePower() 
  {
    int base, exponent;
    string value;

    value = "";
    while (value != "no")
    {
       show setupPower receive[base=base, exponent=exponent];
       powerResult = base;
       if(exponent == 0)
       {
	  powerResult = 1;
       }
       else if(exponent == 1)
       {
	  powerResult = base;
       }
       while(exponent > 1) 
       {
	  powerResult = powerResult * base;
	  exponent = exponent-1;
       }
       show plug answerPower[powerResult = powerResult] receive[value = value];
    }
    exit Ciao;
  }

  session CalculateFibonacci()
  {
    int i,last,nextToLast,fib;
    string value;

    value = "";
    while(value != "no")
    {
       show setupFibonacci receive[fib = fib];
       fibResult = 1;
       i = 2;
       last = 1;
       nextToLast = 1;
       while(i <= fib)
       {
	  fibResult = last + nextToLast;
	  nextToLast = last;
	  last = fibResult;
	  i = i + 1;
       }
       show plug answerFibonacci[fibResult = fibResult] receive[value = value];
    }
    exit Ciao;
  }    
}